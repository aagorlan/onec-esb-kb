///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	Библиотека работы с Git.                                                                                         //
//	Для работы требуется библиотека работы с безопасным хранилищем (общий модуль SDS_ОбщегоНазначения),              // 
//	либо использование БСП при условии замены в коде вызовов "SDS_ОбщегоНазначения" на "ОбщегоНазначения".           //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьОтображениеНастроекАвторизации();
КонецПроцедуры

&НаКлиенте
Процедура СпособАвторизацииПриИзменении(Элемент)
	УстановитьОтображениеНастроекАвторизации();  
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтображениеНастроекАвторизации()
	Элементы.ГруппаАвторизацияOAuth.Видимость = 
										Объект.СпособАвторизации = ПредопределенноеЗначение("Перечисление.Git_СпособыАвторизации.OAuth");
	
	Элементы.ГруппаАвторизацияЛогинПароль.Видимость = 
										Объект.СпособАвторизации = ПредопределенноеЗначение("Перечисление.Git_СпособыАвторизации.ПоПаролю");																	
	ПроверитьНаличиеДанныхАвторизации();
КонецПроцедуры  

&НаКлиенте
Процедура ПроверитьНаличиеДанныхАвторизации()
	ДанныеАвторизации = ПолучитьДанныеАвторизации();
	Элементы.ГруппаУправлениеАвторизацией.Видимость = ЗначениеЗаполнено(ДанныеАвторизации);
	Элементы.ГруппаВариантыАвторизации.Видимость = Не Элементы.ГруппаУправлениеАвторизацией.Видимость;
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеАвторизации()
	ДанныеАвторизации = Неопределено;
	Если Объект.СпособАвторизации = ПредопределенноеЗначение("Перечисление.Git_СпособыАвторизации.OAuth") Тогда
		УстановитьПривилегированныйРежим(Истина);
		ДанныеАвторизации = SDS_ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Объект.Ссылка, "Токен");
		УстановитьПривилегированныйРежим(Ложь); 
	ИначеЕсли Объект.СпособАвторизации = ПредопределенноеЗначение("Перечисление.Git_СпособыАвторизации.ПоПаролю") Тогда
		УстановитьПривилегированныйРежим(Истина);
		ДанныеАвторизации = SDS_ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Объект.Ссылка, "Логин");
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	Возврат ДанныеАвторизации;
КонецФункции

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СохранитьНастройкиАвторизации();
	Объект.ПутьЛокальногоХранения = СокрЛП(Объект.ПутьЛокальногоХранения);
	Если Прав(Объект.ПутьЛокальногоХранения, 1) = "\" Тогда
		Объект.ПутьЛокальногоХранения = Лев(Объект.ПутьЛокальногоХранения, СтрДлина(Объект.ПутьЛокальногоХранения));	
	КонецЕсли;
КонецПроцедуры         

&НаСервере
Процедура СохранитьНастройкиАвторизации()
	Если Объект.СпособАвторизации = Перечисления.Git_СпособыАвторизации.ПоПаролю И ЗначениеЗаполнено(Логин) Тогда
		УстановитьПривилегированныйРежим(Истина);
		SDS_ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Объект.Ссылка, СокрЛП(Логин), "Логин");
		SDS_ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Объект.Ссылка, СокрЛП(Пароль));
		УстановитьПривилегированныйРежим(Ложь);		
	ИначеЕсли Объект.СпособАвторизации = Перечисления.Git_СпособыАвторизации.OAuth И ЗначениеЗаполнено(Токен) Тогда
		УстановитьПривилегированныйРежим(Истина);
		SDS_ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Объект.Ссылка, СокрЛП(Токен), "Токен");
		УстановитьПривилегированныйРежим(Ложь);				
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СпособАвторизацииНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СтандартнаяОбработка = Ложь;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса",
		      ЭтотОбъект);	
		 
	    ПоказатьВопрос(Оповещение,
	        "Продолжить?",
	        РежимДиалогаВопрос.ДаНет,
	        0, 
	        КодВозвратаДиалога.Да, 
	        "Для продолжения необходимо сохранить настройку"
	    );
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт 
    Если Результат = КодВозвратаДиалога.Да Тогда
        ЭтотОбъект.Записать();
    КонецЕсли;	 
КонецПроцедуры

&НаСервере
Процедура ОчиститьДанныеАвторизацииНаСервере()
	Если Объект.СпособАвторизации = Перечисления.Git_СпособыАвторизации.ПоПаролю Тогда
		УстановитьПривилегированныйРежим(Истина);
		SDS_ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(Объект.Ссылка, "Логин, Пароль");
		УстановитьПривилегированныйРежим(Ложь);		
	ИначеЕсли Объект.СпособАвторизации = Перечисления.Git_СпособыАвторизации.OAuth Тогда
		УстановитьПривилегированныйРежим(Истина);
		SDS_ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(Объект.Ссылка, "Токен");
		УстановитьПривилегированныйРежим(Ложь);				
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеАвторизации(Команда)
	ОчиститьДанныеАвторизацииНаСервере();
	ПроверитьНаличиеДанныхАвторизации();
КонецПроцедуры

&НаСервере
Процедура ПутьЛокальногоХраненияИзменениеТекстаРедактированияНаСервере()
	Элементы.Инициализирован.Доступность = Объект.Инициализирован 
											И Объект.ПутьЛокальногоХранения <> Объект.Ссылка.ПутьЛокальногоХранения;
КонецПроцедуры

&НаКлиенте
Процедура ПутьЛокальногоХраненияИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь; 
	Объект.ПутьЛокальногоХранения = Текст;
	КонецСтроки = СтрДлина(Текст) + 1;
	Элементы.ПутьЛокальногоХранения.УстановитьГраницыВыделения(КонецСтроки, КонецСтроки);
	ПутьЛокальногоХраненияИзменениеТекстаРедактированияНаСервере();
КонецПроцедуры
