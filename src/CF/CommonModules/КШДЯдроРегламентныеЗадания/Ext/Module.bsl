#Область ПрограммныйИнтерфейс

#Область СервисПодключениеУзла

// Проверка подключения контуров, подключение контура если ранее не был подключен, удаление настройки и 
// папки в случае отсуствия контура в настройке.
//
Процедура КШДПроверкаНастройкаКонтуров() Экспорт
	ТекущееРЗ = Метаданные.РегламентныеЗадания.КШДЯдроПроверкаНастройкаКонтуров;
		ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(ТекущееРЗ);
	
	Главный = "master";
	НастройкаПодключения = Справочники.РГНастройкиРепозиториев.НайтиПоНаименованию(Главный);
	Настройка = КШДЯдроВызовСервера.БазаПодключенаККШД(Истина);
	Если Не Настройка.РасположениеУзлаАктуально ИЛИ Не Настройка.РепозиторийИнициализирован Тогда
		Возврат; //Подключение к КШД не настроено
	КонецЕсли;
	
	МассивПодключенных = КШДЯдроВызовСервераПовтИсп.ЗначениеИзКэша("", Перечисления.КШДЯдроКлючиКэшаНастроек.УзелКонтуры);
	СписокВсехКонтуров = КШДЯдроВызовСервераПовтИсп.ЗначениеИзКэша("", 
		Перечисления.КШДЯдроКлючиКэшаНастроек.МассивКонтуров);
	
	Если МассивПодключенных[0] = "all" Тогда
		МассивПодключенных.Очистить();
		Для Каждого ТекущийКонтур Из СписокВсехКонтуров Цикл
			МассивПодключенных.Добавить(ТекущийКонтур.id);
		КонецЦикла;
	КонецЕсли;
	
	МассивНужныхНастроек = Новый Массив;
	МассивНужныхНастроек.Добавить(НастройкаПодключения);
	Для Каждого ПодключенныйКонтур Из МассивПодключенных Цикл
		Настройка = ПроверитьПодключитьКонтур(ПодключенныйКонтур, НастройкаПодключения);
		Если Настройка <> Неопределено Тогда
			МассивНужныхНастроек.Добавить(Настройка);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РГНастройкиРепозиториев.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.РГНастройкиРепозиториев КАК РГНастройкиРепозиториев
	               |ГДЕ
	               |	НЕ РГНастройкиРепозиториев.Ссылка В (&МассивНастроек)";
	Запрос.УстановитьПараметр("МассивНастроек", МассивНужныхНастроек);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НастройкаПодключения = Выборка.Ссылка;
		РГПолныеПрава.УдалитьДанныеИзБезопасногоХранилища(НастройкаПодключения);
		РГОбщегоНазначения.УдалитьКаталог(НастройкаПодключения.ПутьЛокальногоХранения);
		ТекНастройка = НастройкаПодключения.ПолучитьОбъект();
		ТекНастройка.Удалить();
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СервисСервисыУзла

// Проверка описанных сервисов узла, подключение новых, отключение отсуствующих и сброс статистики обработки
//
Процедура КШДЯдроКонтрольСервисовУзла() Экспорт
	
	ВсеСервисы = КШДЯдроСерверПереопределяемый.СервисыТекущегоУзла();
	
	МассивОписанных = Новый Массив;
	
	Для Каждого Сервис Из ВсеСервисы Цикл
		МассивОписанных.Добавить(Сервис.Идентификатор);
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ОписаниеБлокировки = Блокировка.Добавить("РегистрСведений.КШДЯдроСостояниеСервисовУзла");
			ОписаниеБлокировки.УстановитьЗначение("Идентификатор", Сервис.Идентификатор);
			Блокировка.Заблокировать();
			
			Рег = РегистрыСведений.КШДЯдроСостояниеСервисовУзла.СоздатьМенеджерЗаписи();
			Рег.Идентификатор = Сервис.Идентификатор;
			Рег.Прочитать();
			Если Не Рег.Выбран() Тогда
				ЗаполнитьЗначенияСвойств(Рег, Сервис);
			КонецЕсли;
			Рег.Записать(Истина);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			// BSLLS:UsageWriteLogEvent-off
			ЗаписьЖурналаРегистрации("КШД.Ядро.Обновление сервисов узла", УровеньЖурналаРегистрации.Ошибка, , ,
				"При обновлении сервиса " + Сервис.Идентификатор + " произошла ошибка:" + Символы.ПС
				+ ОписаниеОшибки);
			// BSLLS:UsageWriteLogEvent-on
		КонецПопытки;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КШДЯдроСостояниеСервисовУзла.Идентификатор КАК Идентификатор
	               |ИЗ
	               |	РегистрСведений.КШДЯдроСостояниеСервисовУзла КАК КШДЯдроСостояниеСервисовУзла
	               |ГДЕ
	               |	НЕ КШДЯдроСостояниеСервисовУзла.Идентификатор В (&МассивОписанных)";
	Запрос.УстановитьПараметр("МассивОписанных", МассивОписанных);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Не КШДЯдроСервер.ОтключитьСервис(Выборка.Идентификатор) Тогда
				Продолжить;
			КонецЕсли;
			Рег = РегистрыСведений.КШДЯдроСостояниеСервисовУзла.СоздатьМенеджерЗаписи();
			Рег.Идентификатор = Выборка.Идентификатор;
			Рег.Прочитать();
			Рег.Удалить();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Считывание сообщения из очереди сервиса и передача его в процедуру вызова 
//
// Параметры:
//  Идентификатор - Строка - Идентификатор сервиса
//
Процедура КШДЯдроЧтениеДанныхОчереди(Идентификатор) Экспорт
	Отбор = Новый Структура;
	Отбор.Вставить("Идентификатор", Идентификатор);
	НастройкиСервиса = РегистрыСведений.КШДЯдроСостояниеСервисовУзла.Получить(Отбор);
	
	Если Не НастройкиСервиса.Включен Тогда
		Возврат;
	КонецЕсли;
	
	Сервис = НастройкиСервиса.Наименование;
	Потоков = НастройкиСервиса.КоличествоПотоков;
	ИмяМетода = НастройкиСервиса.Метод;
	
	ОтборЗаданий = Новый Структура;
	ОтборЗаданий.Вставить("ИмяМетода", ИмяМетода);
	ОтборЗаданий.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	Пока Истина Цикл
		ВыборкаЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборЗаданий);
		Пока ВыборкаЗаданий.Количество() < Потоков Цикл
			ДатаЗапроса = ТекущаяУниверсальнаяДатаВМиллисекундах();
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(ДатаЗапроса);
			МассивПараметров.Добавить(Идентификатор);
			РезультатЧтения = КШДЯдроСервер.НачатьЧтениеСообщенияИзОчереди(Идентификатор);
			Если РезультатЧтения.ЕстьСообщение Тогда
				
				МассивПараметров.Добавить(РезультатЧтения.ИдентификаторСообщения);
				МассивПараметров.Добавить(Перечисления.КШДЯдроВидыСобытий.Запрос);
				МассивПараметров.Добавить("");
				
				ФоновыеЗадания.Выполнить("КШДЯдроСервер.ЗафиксироватьСобытиеОчередиВФоне", МассивПараметров);
				
				ПараметрыЗадания = Новый Массив;
				ПараметрыЗадания.Добавить(РезультатЧтения.Контур);
				ПараметрыЗадания.Добавить(РезультатЧтения.Пакет);
				ПараметрыЗадания.Добавить(РезультатЧтения.ИдентификаторСообщения);
				
				ФоновыеЗадания.Выполнить(ИмяМетода, ПараметрыЗадания, , "" + Сервис + ": разбор сообщения");
				
				ВыборкаЗаданий.Добавить("");
				
				МассивПараметров.Вставить(0, ТекущаяУниверсальнаяДатаВМиллисекундах());
				МассивПараметров.Вставить(3, Перечисления.КШДЯдроВидыСобытий.НачалоОбработки);
				ФоновыеЗадания.Выполнить("КШДЯдроСервер.ЗафиксироватьСобытиеОчередиВФоне", МассивПараметров);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Сбор и запись показателей работы узла
//
Процедура КШДЯдроСборПоказателейРаботыУзла() Экспорт
	
	Период = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КШДЯдроОчередьСообщенийУзла.ИдентификаторСервиса КАК Аналитика,
	               |	СУММА(1) КАК Число
	               |ПОМЕСТИТЬ ССообщениями
	               |ИЗ
	               |	РегистрСведений.КШДЯдроОчередьСообщенийУзла КАК КШДЯдроОчередьСообщенийУзла
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КШДЯдроОчередьСообщенийУзла.ИдентификаторСервиса
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КШДЯдроСостояниеСервисовУзла.Идентификатор КАК Аналитика,
	               |	ЕСТЬNULL(ССообщениями.Число, 0) КАК Число
	               |ИЗ
	               |	РегистрСведений.КШДЯдроСостояниеСервисовУзла КАК КШДЯдроСостояниеСервисовУзла
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ССообщениями КАК ССообщениями
	               |		ПО КШДЯдроСостояниеСервисовУзла.Идентификатор = ССообщениями.Аналитика";
	Выборка = Запрос.Выполнить().Выбрать();
	НаборЗаписей = РегистрыСведений.КШДЯдроПоказателиРаботыУзла.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ТекущаяДатаСеанса(), Истина);
	НаборЗаписей.Отбор.Показатель.Установить(Справочники.КШДЯдроПоказателиРаботыУзла.СообщенийВОчереди, Истина);
	
	Пока Выборка.Следующий() Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		НоваяЗапись.Период = Период;
		НоваяЗапись.Показатель = Справочники.КШДЯдроПоказателиРаботыУзла.СообщенийВОчереди;
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
	СписокФЗ = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Состояние", СостояниеФоновогоЗадания.Активно));
	
	НаборЗаписей = РегистрыСведений.КШДЯдроПоказателиРаботыУзла.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ТекущаяДатаСеанса(), Истина);
	НаборЗаписей.Отбор.Показатель.Установить(Справочники.КШДЯдроПоказателиРаботыУзла.ИспользованныеПотокиСервиса, 
		Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КШДЯдроСостояниеСервисовУзла.Метод КАК Метод,
	               |	КШДЯдроСостояниеСервисовУзла.Идентификатор КАК Аналитика
	               |ИЗ
	               |	РегистрСведений.КШДЯдроСостояниеСервисовУзла КАК КШДЯдроСостояниеСервисовУзла";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Количество = 0;
		Для Каждого ФЗ Из СписокФЗ Цикл
			Если ФЗ.ИмяМетода = Выборка.Метод Тогда
				Количество = Количество + 1;
			КонецЕсли;
		КонецЦикла;
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		НоваяЗапись.Число = Количество;
		НоваяЗапись.Период = Период;
		НоваяЗапись.Показатель = Справочники.КШДЯдроПоказателиРаботыУзла.ИспользованныеПотокиСервиса;
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПроверитьПодключитьКонтур(ИмяКонтура, ОсновнаяНастройка)
	Главный = "master";
	НастройкаПодключения = Справочники.РГНастройкиРепозиториев.НайтиПоНаименованию(ИмяКонтура);
	СимволовБезПапки = СтрДлина(ОсновнаяНастройка.ПутьЛокальногоХранения) - СтрДлина(Главный);
	ПутьЛокальногоХранения = Лев(ОсновнаяНастройка.ПутьЛокальногоХранения, СимволовБезПапки) + ИмяКонтура;
	
	Если Не НастройкаПодключения.Пустая() И НастройкаПодключения.Инициализирован Тогда
		Если НастройкаПодключения.ПутьЛокальногоХранения = ПутьЛокальногоХранения Тогда
			//Пробуем обновить
			Результат = РГОбщегоНазначения.ПолучитьИзУдаленногоРепозитория(НастройкаПодключения);
			Если Результат.Успешно Тогда
				Возврат НастройкаПодключения;
			КонецЕсли;
			//Зафиксируем ошибку и инициализируем заново
			ТекстЗаписи = "Ошибка обновления контура " + ИмяКонтура + ", ошибка: " + Результат.Ошибка;
			ЗаписьЖурналаРегистрации("КШДПроверка.ОбновлениеКонтура", УровеньЖурналаРегистрации.Ошибка, , , ТекстЗаписи);
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкаПодключения.Пустая() Тогда
		НоваяНастройка = ОсновнаяНастройка.Скопировать();
		НоваяНастройка.Наименование = ИмяКонтура;
	Иначе
		НоваяНастройка = НастройкаПодключения.ПолучитьОбъект();
	КонецЕсли;
	
	НоваяНастройка.Инициализирован = Ложь;
	НоваяНастройка.ПутьЛокальногоХранения = ПутьЛокальногоХранения;
	НоваяНастройка.Записать();
	НастройкаПодключения = НоваяНастройка.Ссылка;
	
	Если НоваяНастройка.СпособАвторизации = Перечисления.РГСпособыАвторизации.OAuth Тогда
		ДанныеАвторизации = РГПолныеПрава.ПрочитатьДанныеИзБезопасногоХранилища(ОсновнаяНастройка, "Токен");
		РГПолныеПрава.ЗаписатьДанныеВБезопасноеХранилище(НастройкаПодключения, ДанныеАвторизации, "Токен");		
	КонецЕсли; 
	Если НоваяНастройка.СпособАвторизации = Перечисления.РГСпособыАвторизации.ПоПаролю Тогда
		ДанныеАвторизации = РГПолныеПрава.ПрочитатьДанныеИзБезопасногоХранилища(ОсновнаяНастройка, "Логин, Пароль"); 
		РГПолныеПрава.ЗаписатьДанныеВБезопасноеХранилище(НастройкаПодключения, ДанныеАвторизации.Логин, "Логин");
		РГПолныеПрава.ЗаписатьДанныеВБезопасноеХранилище(НастройкаПодключения, ДанныеАвторизации.Пароль, "Пароль");
	КонецЕсли; 
	Результат = РГОбщегоНазначения.ИнициализацияПодключенияКРепозиторию(НастройкаПодключения, ИмяКонтура);
	Если Не Результат.Успешно Тогда
		ТекстЗаписи = "Ошибка инициализации контура " + ИмяКонтура + ", ошибка: " + Результат.Ошибка;
		ЗаписьЖурналаРегистрации("КШДПроверка.ОбновлениеКонтура", УровеньЖурналаРегистрации.Ошибка, , , ТекстЗаписи);
	КонецЕсли;
	
	Возврат НастройкаПодключения;
КонецФункции

#КонецОбласти