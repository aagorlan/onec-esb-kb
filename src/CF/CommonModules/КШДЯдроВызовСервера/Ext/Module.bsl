#Область ПрограммныйИнтерфейс

// Получает информацию о подключении базы к КШД
// 
// Возвращаемое значение:
//	Структура:
//		* ВерсияGit - Строка - Установленная версия Git
//		* ОшибкаGit - Строка - Ошибка установки Git
//		* РасположениеУзлаАктуально - Булево - Проверка что после настройки расположение базы не изменялось
//		* РепозиторийИнициализирован - Булево - Проверка что папка с репозиторием инициализирована
//		* СохраненноеРасположениеУзла - Строка - Строка подключения для которой был настроен узел
//
Функция БазаПодключенаККШД(ПолучитьОбновитьКонфигурациюУзла = Ложь) Экспорт
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("ВерсияGit", "");
	СтруктураОтвета.Вставить("ОшибкаGit", "");
	СтруктураОтвета.Вставить("РасположениеУзлаАктуально", Ложь);
	СтруктураОтвета.Вставить("РепозиторийИнициализирован", Ложь);
	СтруктураОтвета.Вставить("СохраненноеРасположениеУзла", "");
	СтруктураОтвета.Вставить("ВерсияНастройки", "");
	СтруктураОтвета.Вставить("КонфигурацияУзла", "");
	
	Если ПолучитьОбновитьКонфигурациюУзла Тогда
		УстановленнаяВерсия = РГОбщегоНазначения.ВерсияGit();
		СтруктураОтвета.Вставить("ВерсияGit", УстановленнаяВерсия.Версия);
		СтруктураОтвета.Вставить("ОшибкаGit", УстановленнаяВерсия.Ошибка); 
	КонецЕсли;
	
	СохраненноеРсположение = Константы.КШДРасположениеУзла.Получить();

	Если СтрокаСоединенияИнформационнойБазы() = СохраненноеРсположение Тогда
		СтруктураОтвета.Вставить("РасположениеУзлаАктуально", Истина);
	Иначе
		СтруктураОтвета.Вставить("СохраненноеРасположениеУзла", СохраненноеРсположение);
	КонецЕсли;
	
	Главный = "master";
	
	НастройкаПодключения = Справочники.РГНастройкиРепозиториев.НайтиПоНаименованию(Главный);
	Если Не НастройкаПодключения.Пустая() И НастройкаПодключения.Инициализирован Тогда
		СтруктураОтвета.Вставить("РепозиторийИнициализирован", Истина);
		Если ПолучитьОбновитьКонфигурациюУзла Тогда
			ПолучитьОбновитьСправочнуюИнформацию(СтруктураОтвета, НастройкаПодключения);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
КонецФункции

Функция ПолучитьСписокПроектовКШД() Экспорт
	Главный = "master";
	Путь = ПолучитьПутьКФайлам(Главный);
	Файл = Новый Файл(Путь + "projects.json");
	
	Если Файл.Существует() Тогда
		Чтение = Новый ЧтениеJSON;
		Чтение.ОткрытьФайл(Путь + "projects.json");
		ДанныеПроектов = ПрочитатьJSON(Чтение, Истина);
	Иначе
		ДанныеПроектов = Новый Соответствие;
	КонецЕсли;
	
	Возврат ДанныеПроектов;
КонецФункции

Функция ПолучитьСписокКонтуровКШД() Экспорт
	Главный = "master";
	Путь = ПолучитьПутьКФайлам(Главный);
	Файл = Новый Файл(Путь + "outline.json");
	
	Если Файл.Существует() Тогда
		Чтение = Новый ЧтениеJSON;
		Чтение.ОткрытьФайл(Путь + "outline.json");
		ДанныеКонтуров = ПрочитатьJSON(Чтение);
	Иначе
		ДанныеКонтуров = Новый Массив;
	КонецЕсли;
	
	Возврат ДанныеКонтуров;
КонецФункции

Функция ПолучитьДеревоКонтуровКШД(ВыборКорня = Ложь, МассивПометок = Неопределено) Экспорт
	Если МассивПометок = Неопределено Тогда
		МассивПометок = Новый Массив;
	КонецЕсли;
	
	Дерево = Новый ДеревоЗначений;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Булево"));
	ОписаниеБулево = Новый ОписаниеТипов(МассивТипов);
	Дерево.Колонки.Добавить("Пометка", ОписаниеБулево);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	КС = Новый КвалификаторыСтроки();
	ОписаниеСтрока = Новый ОписаниеТипов(МассивТипов, , КС);
	Дерево.Колонки.Добавить("Имя", ОписаниеСтрока);
	Дерево.Колонки.Добавить("Представление", ОписаниеСтрока);
	Дерево.Колонки.Добавить("Назначение", ОписаниеСтрока);
	
	СоответствиеСтрок = Новый Соответствие;
	
	Если ВыборКорня Тогда
		НоваяСтрока = Дерево.Строки.Добавить();
		НоваяСтрока.Имя = "all";
		НоваяСтрока.Представление = "Все";
		Если МассивПометок.Найти("all") <> Неопределено Тогда
			НоваяСтрока.Пометка = Истина;
		КонецЕсли;
		СоответствиеСтрок.Вставить("", НоваяСтрока);
	Иначе
		СоответствиеСтрок.Вставить("", Дерево);
	КонецЕсли;
	
	ДанныеКонтуров = ПолучитьСписокКонтуровКШД();
	СтруктураТиповКонтуров = ПолучитьСтрукутруТипов();
	
	Для Каждого Контур Из ДанныеКонтуров Цикл
		ТекРодитель = СоответствиеСтрок.Получить(Контур.parent);
		Если ТекРодитель = Неопределено Тогда
			ТекстЗаписи = "Нарушение структуры контуров. Контур " + Контур.id + " не найден родитель " + Контур.parent;
			ЗаписьЖурналаРегистрации("КШД.СтруктураКонтуров", УровеньЖурналаРегистрации.Ошибка, , , ТекстЗаписи);
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТекРодитель.Строки.Добавить();
		НоваяСтрока.Имя = Контур.id;
		НоваяСтрока.Представление = Контур.name;
		НоваяСтрока.Назначение = СтруктураТиповКонтуров[Контур.type];
		Если МассивПометок.Найти(Контур.id) <> Неопределено Тогда
			НоваяСтрока.Пометка = Истина;
		КонецЕсли;
		СоответствиеСтрок.Вставить(Контур.id, НоваяСтрока);
	КонецЦикла;
	
	Возврат Дерево;
КонецФункции

Функция ПолучитьСтрукутруТипов() Экспорт
	СтруктураТипов = Новый Структура;
	СтруктураТипов.Вставить("production", "Рабочий");
	СтруктураТипов.Вставить("staging", "Предрелизный");
	СтруктураТипов.Вставить("test", "Тестовый");
	СтруктураТипов.Вставить("copy", "Копия");
	СтруктураТипов.Вставить("develop", "Разработка");
	
	Возврат СтруктураТипов
КонецФункции

Функция ПолучитьДанныеУзлаКШД() Экспорт
	Главный = "master";
	Путь = ПолучитьПутьКФайлам(Главный);
	Файл = Новый Файл(Путь + "nodes.json");
	
	Если Файл.Существует() Тогда
		Чтение = Новый ЧтениеJSON;
		Чтение.ОткрытьФайл(Путь + "nodes.json");
		ДанныеУзлов = ПрочитатьJSON(Чтение);
		Чтение.Закрыть();
	Иначе
		ДанныеУзлов = Новый Массив;
	КонецЕсли;
	
	ТекущийУзел = СтрокаСоединенияИнформационнойБазы();
	Найден = Ложь;
	
	Для Каждого ДанныеУзла Из ДанныеУзлов Цикл
		Если ДанныеУзла.id = ТекущийУзел Тогда
			Найден = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не Найден Тогда
		ДанныеУзла = Неопределено;
	КонецЕсли;
	
	Возврат ДанныеУзла;
КонецФункции

Функция ПолучитьПутьКФайлам(Ветка, ПутьВнутри = "") Экспорт
	НастройкаПодключения = Справочники.РГНастройкиРепозиториев.НайтиПоНаименованию(Ветка);
	СимволРазделения = ?(СтрНайти(НастройкаПодключения.ПутьЛокальногоХранения, "/") > 0, "/", "\");
	
	Если СимволРазделения = "/" Тогда
		ПутьВнутри = СтрЗаменить(ПутьВнутри, "\", "/");
	Иначе
		ПутьВнутри = СтрЗаменить(ПутьВнутри, "/", "\");
	КонецЕсли;
	
	Если Прав(СокрЛП(ПутьВнутри), 1) <> СимволРазделения И ЗначениеЗаполнено(ПутьВнутри) Тогда
		ПутьВнутри = ПутьВнутри + СимволРазделения;
	КонецЕсли;
	
	Возврат НастройкаПодключения.ПутьЛокальногоХранения + СимволРазделения + ПутьВнутри;
КонецФункции

Процедура УстановкаПараметровСеанса() Экспорт
	Результат = БазаПодключенаККШД();
	Актуально = (Результат.РасположениеУзлаАктуально И Результат.РепозиторийИнициализирован);
	ПараметрыСеанса.КШДЯдроПодключениеАктуально = Актуально;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьОбновитьСправочнуюИнформацию(СтруктураОтвета, НастройкаПодключения)
	Главный = "master";
	РГОбщегоНазначения.ПолучитьИзУдаленногоРепозитория(НастройкаПодключения);
	
	ДанныеУзла = ПолучитьДанныеУзлаКШД();
	
	Если ДанныеУзла = Неопределено Тогда
		СтруктураОтвета.Вставить("РасположениеУзлаАктуально", Ложь);
	Иначе
		СтруктураОтвета.Вставить("КонфигурацияУзла", ДанныеУзла);
		ТекущийКоммит = РГОбщегоНазначения.ПолучитьИндексТекущегоКоммита(НастройкаПодключения);
		СтруктураОтвета.Вставить("ВерсияНастройки", ТекущийКоммит);
		Если ДанныеУзла.localpath <> НастройкаПодключения.ПутьЛокальногоХранения Тогда
			ТекущиеНастройки = НастройкаПодключения.ПолучитьОбъект();
			СимволРазделения = ?(СтрНайти(ДанныеУзла.localpath, "/") > 0, "/", "\");
			ТекущиеНастройки.ПутьЛокальногоХранения = ДанныеУзла.localpath + СимволРазделения + Главный;
			ТекущиеНастройки.Записать();
		КонецЕсли;
	КонецЕсли;
КонецФункции

#КонецОбласти