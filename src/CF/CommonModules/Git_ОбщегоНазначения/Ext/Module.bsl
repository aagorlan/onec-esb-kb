#Область ПрограммныйИнтерфейс 

#Область РаботаСGit   
// 1. Получает из настройки репозитория данные для подключения к удаленному репозиторию;
// 2. Клонирует удаленный репозиторий в локальный, для хранения используется переданное локальное расположение (git clone);
// 3. Переключает на ветку с созданием (если ветка отсутствует)
//Параметры:
// Настройка - СправочникСсылка.Git_НастройкиРепозиториев
// Настройка - Строка - Имя ветки Git
// Возвращаемое значение:
//  Булево - Истина, если выполнение команд завершилось успешно
Функция ИнициализацияПодключенияКРепозиторию(Настройка, ИмяВетки) Экспорт
	Успешно = Истина;
	СтрокаСоединения = Справочники.Git_НастройкиРепозиториев.ПолучитьСтрокуСоединения(Настройка);
	ПутьКGit = Константы.Git_ПутьКИсполняемомуФайлу.Получить();	
		
	Если Не Настройка.Инициализирован Тогда
		КомандаClone = ПутьКGit + " clone " + СтрокаСоединения + " " + Настройка.ПутьЛокальногоХранения;
		РезультатClone = ВыполнитьКомандуWindowsНаСервере(КомандаClone);
		Успешно = РезультатClone.Код = 0;  
		
		//включаем автосоздание ссылок на отслеживание по умолчанию
		КомандаНастройки = ПутьКGit + " config --global push.autoSetupRemote true";
		ВыполнитьКомандуWindowsНаСервере(КомандаНастройки);

		Если Успешно Тогда
			НастройкаОбъект = Настройка.Ссылка.ПолучитьОбъект();
			НастройкаОбъект.Инициализирован = Истина;
			НастройкаОбъект.Записать();
		КонецЕсли;
	КонецЕсли;

	Если Успешно Тогда
		КомандаCheckout = ПутьКGit + " checkout -B " + ИмяВетки;
		РезультатCheckout = ВыполнитьКомандуWindowsНаСервере(КомандаCheckout, Настройка.ПутьЛокальногоХранения);
		Успешно = РезультатCheckout.Код = 0;
	КонецЕсли;
			
	Возврат Успешно;
КонецФункции 

// Возвращает имя текущей ветки
//Параметры:
// Настройка - СправочникСсылка.Git_НастройкиРепозиториев 
// Возвращаемое значение:
//  Строка - Имя текущей ветки
Функция ПолучитьИмяТекущейВетки(Настройка) Экспорт
	ПутьКGit = Константы.Git_ПутьКИсполняемомуФайлу.Получить();	
	
	КомандаИмяВетки = ПутьКGit + " symbolic-ref --short HEAD";
	РезультатИмяВетки = ВыполнитьКомандуWindowsНаСервере(КомандаИмяВетки, Настройка.ПутьЛокальногоХранения); 
	Успешно = РезультатИмяВетки.Код = 0; 
		
	Если Успешно Тогда 
		Возврат СокрЛП(РезультатИмяВетки.Ответ);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции  

// Возвращает индекс текущго коммита
//Параметры:
// Настройка - СправочникСсылка.Git_НастройкиРепозиториев 
// Возвращаемое значение:
//  Строка - хэш текущго коммита
Функция ПолучитьИндексТекущегоКоммита(Настройка) Экспорт
	ПутьКGit = Константы.Git_ПутьКИсполняемомуФайлу.Получить();	
	
	КомандаИндексКоммита = ПутьКGit + " rev-parse HEAD";
	РезультатИндексКоммита = ВыполнитьКомандуWindowsНаСервере(КомандаИндексКоммита, Настройка.ПутьЛокальногоХранения); 
	Успешно = РезультатИндексКоммита.Код = 0; 
		
	Если Успешно Тогда 
		Возврат СокрЛП(РезультатИндексКоммита.Ответ);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Переключает на указанные ветку или коммит
//Параметры:
// Настройка - СправочникСсылка.Git_НастройкиРепозиториев
// ИмяВеткиИдКоммита - Строка
// Возвращаемое значение:
//  Булево - Истина, если выполнение команды завершилось успешно
Функция ПереключитьсяНаВеткуКоммит(Настройка, ИмяВеткиИдКоммита) Экспорт
	ПутьКGit = Константы.Git_ПутьКИсполняемомуФайлу.Получить();	
	
	КомандаCheckout = ПутьКGit + " checkout " + ИмяВеткиИдКоммита;
	РезультатCheckout = ВыполнитьКомандуWindowsНаСервере(КомандаCheckout, Настройка.ПутьЛокальногоХранения);
	Успешно = РезультатCheckout.Код = 0;
 	
	Возврат Успешно;
КонецФункции   

// Удаляет указанную ветку
//Параметры:
// Настройка - СправочникСсылка.Git_НастройкиРепозиториев
// ИмяВетки - Строка   
// ВУдаленномРепозитории - Булево - При значении "Истина" будет удалена ветка в удалённом репозитории, 
//									иначе будет удалена локальная ветка
// Возвращаемое значение:
//  Булево - Истина, если выполнение команды завершилось успешно
Функция УдалитьВетку(Настройка, ИмяВетки, ВУдаленномРепозитории = Ложь) Экспорт
	ПутьКGit = Константы.Git_ПутьКИсполняемомуФайлу.Получить();	
	
	Если ВУдаленномРепозитории Тогда
		КомандаУдалить = ПутьКGit + " push origin --delete " + ИмяВетки;
	Иначе
		КомандаУдалить = ПутьКGit + " branch -D " + ИмяВетки;			
	КонецЕсли;
	РезультатУдалить = ВыполнитьКомандуWindowsНаСервере(КомандаУдалить, Настройка.ПутьЛокальногоХранения);
	Успешно = РезультатУдалить.Код = 0;
 	
	Возврат Успешно;
КонецФункции  

// Отправляет данные локального репозитория в удалённый
//Параметры:
// Настройка - СправочникСсылка.Git_НастройкиРепозиториев
// ПараметрыКоманды - Строка - дополнительные опции команды
// Возвращаемое значение:
//  Структура, содержащая значения с ключами:
//		Результат - Число - 0, если выполнение команды завершилось успешно
//							1, если возник конфликт
//							2, если команда вернула ошибку выполнения
//		Сообщение - Строка - текст ответа или ошибки команды
Функция ОтправитьВУдаленныйРепозиторий(Настройка, ПараметрыКоманды = Неопределено) Экспорт
	СтруктураОтвета = Новый Структура();
	ПутьКGit = Константы.Git_ПутьКИсполняемомуФайлу.Получить();	
	
	КомандаPush = ПутьКGit + " push" + ?(ПараметрыКоманды <> Неопределено, " " + ПараметрыКоманды, "");
	РезультатPush = ВыполнитьКомандуWindowsНаСервере(КомандаPush, Настройка.ПутьЛокальногоХранения);
	Если РезультатPush.Код = 0 Тогда
			СтруктураОтвета.Вставить("Результат", 0);
			СтруктураОтвета.Вставить("Сообщение", ""); 
	ИначеЕсли РезультатPush.Код = 1 Тогда
		СтруктураОтвета.Вставить("Результат", 1);
		СтруктураОтвета.Вставить("Сообщение", РезультатPush.Ответ + РезультатPush.Ошибка);
	Иначе
		СтруктураОтвета.Вставить("Результат", 2);
		СтруктураОтвета.Вставить("Сообщение", РезультатPush.Ответ + РезультатPush.Ошибка);			
	КонецЕсли;
	
	Возврат СтруктураОтвета;
КонецФункции 

// Получает данные удаленного репозитория
//Параметры:
// Настройка - СправочникСсылка.Git_НастройкиРепозиториев
// Возвращаемое значение:
//  Структура, содержащая значения с ключами:
//		Результат - Число - 0, если выполнение команды завершилось успешно
//							1, если возник конфликт
//							2, если команда вернула ошибку выполнения
//		Сообщение - Строка - текст ответа или ошибки команд
Функция ПолучитьИзУдаленногоРепозитория(Настройка) Экспорт
	СтруктураОтвета = Новый Структура();
	ПутьКGit = Константы.Git_ПутьКИсполняемомуФайлу.Получить();	
	
	КомандаPull = ПутьКGit + " pull";
	РезультатPull = ВыполнитьКомандуWindowsНаСервере(КомандаPull, Настройка.ПутьЛокальногоХранения);
	Если РезультатPull.Код = 0 Тогда
			СтруктураОтвета.Вставить("Результат", 0);
			СтруктураОтвета.Вставить("Сообщение", ""); 
	ИначеЕсли РезультатPull.Код = 1 Тогда
		СтруктураОтвета.Вставить("Результат", 1);
		СтруктураОтвета.Вставить("Сообщение", РезультатPull.Ответ + РезультатPull.Ошибка);
	Иначе
		СтруктураОтвета.Вставить("Результат", 2);
		СтруктураОтвета.Вставить("Сообщение", РезультатPull.Ответ + РезультатPull.Ошибка);			
	КонецЕсли;
	
	Возврат СтруктураОтвета;
КонецФункции

// Проверяет наличие изменений файлов в рабочем каталоге, не проверяя
// неиндексированные файлы
//Параметры:
// Настройка - СправочникСсылка.Git_НастройкиРепозиториев
// Возвращаемое значение:
//  Булево - Истина, если есть хотя бы один индексированный файл изменён или удалён
Функция ЕстьИзмененияФайлов(Настройка) Экспорт
	ЕстьИзменения = Ложь;
	
	ПутьКGit = Константы.Git_ПутьКИсполняемомуФайлу.Получить();

	КомандаDiff = ПутьКGit + " diff --exit-code";	 
	РезультатDiff = ВыполнитьКомандуWindowsНаСервере(КомандаDiff, Настройка.ПутьЛокальногоХранения);
	ЕстьИзменения = РезультатDiff.Код = 1; 
	
	Возврат ЕстьИзменения; 
КонецФункции  

// Возвращает массивы новых, изменённых и удалённых файлов в рабочем каталоге, либо наличие изменений
//Параметры:
// Настройка - СправочникСсылка.Git_НастройкиРепозиториев 
// ТолькоПроверитьИзменения - Булево, при передаче "Истина" функция не собирает массивы файлов 
// Возвращаемое значение:
//  Структура - Содержит массивы названий файлов и каталогов с адресацией от пути локального хранения,
//				если не передан параметр ТолькоПроверитьИзменения, или он равен "Ложь".
//				Ключи элементов структуры "Новые", "Измененные" и "Удаленные" соответствуют состоянию файлов, перечисленных в массивах.
//  Булево - Истина, если передан параметр ТолькоПроверитьИзменения = "Истина" и есть новые, изменённые или удалённые файлы
Функция СтатусФайлов(Настройка, ТолькоПроверитьИзменения = Ложь) Экспорт
	Новые = Новый Массив;
	Измененные = Новый Массив;
	Удаленные = Новый Массив;
	ЕстьИзменения = Ложь;
	
	ПутьКGit = Константы.Git_ПутьКИсполняемомуФайлу.Получить();

	КомандаStatus = ПутьКGit + " status -s";	 
	РезультатStatus = ВыполнитьКомандуWindowsНаСервере(КомандаStatus, Настройка.ПутьЛокальногоХранения);
	Если РезультатStatus.Код = 0 Тогда
		
		СтрокиФайлов = СтрРазделить(РезультатStatus.Ответ, Символы.ПС, Ложь);
		Для Каждого СтрокаФайла Из СтрокиФайлов Цикл
			СтатусФайла = Лев(СтрокаФайла, 2);
			ИмяФайла = СокрЛП(Прав(СтрокаФайла, СтрДлина(СтрокаФайла) - 3));
			Если СтатусФайла = "??" Тогда
				ЕстьИзменения = Истина;
				Если ТолькоПроверитьИзменения Тогда
					Прервать;
				Иначе
					Новые.Добавить(ИмяФайла);
				КонецЕсли;
			ИначеЕсли Прав(СтатусФайла, 1) = "m" Тогда 
				ЕстьИзменения = Истина;
				Если ТолькоПроверитьИзменения Тогда
					Прервать;
				Иначе
					Измененные.Добавить(ИмяФайла);
				КонецЕсли;
			ИначеЕсли Прав(СтатусФайла, 1) = "d" Тогда 
				ЕстьИзменения = Истина;
				Если ТолькоПроверитьИзменения Тогда
					Прервать;
				Иначе
					Удаленные.Добавить(ИмяФайла);
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если ТолькоПроверитьИзменения Тогда
		Возврат ЕстьИзменения;
	Иначе
		СтруктураВозврата = Новый Структура; 
		СтруктураВозврата.Вставить("Новые", Новые);
		СтруктураВозврата.Вставить("Измененные", Измененные);
		СтруктураВозврата.Вставить("Удаленные", Удаленные);
		Возврат СтруктураВозврата;
	КонецЕсли;
КонецФункции

// Индексирует файлы в локальном каталоге
//Параметры:
// Настройка - СправочникСсылка.Git_НастройкиРепозиториев 
// Возвращаемое значение:
//  Булево - Истина, если выполнение команды завершилось успешно
Функция ИндексироватьФайлы(Настройка) Экспорт
	ПутьКGit = Константы.Git_ПутьКИсполняемомуФайлу.Получить();	
	
	КомандаAdd = ПутьКGit + " add -A";
	РезультатAdd = ВыполнитьКомандуWindowsНаСервере(КомандаAdd, Настройка.ПутьЛокальногоХранения); 
	Успешно = РезультатAdd.Код = 0; 
	
	Возврат Успешно;
КонецФункции

// Создаёт коммит с указанным сообщением и отправляет изменения в удалённый репозиторий
//Параметры:
// Настройка - СправочникСсылка.Git_НастройкиРепозиториев
// СообщениеКоммита - Строка
// Возвращаемое значение:
//  Булево - Истина, если выполнение команды завершилось успешно
//  		- Ложь, если файлы не проиндексированы для отправки, или произошла ошибка
Функция СоздатьОтправитьКоммит(Настройка, СообщениеКоммита) Экспорт
	ПутьКGit = Константы.Git_ПутьКИсполняемомуФайлу.Получить();	
	
	ИмяФайла = ЗаписатьСообщениеВФайл(СообщениеКоммита, Настройка.ПутьЛокальногоХранения);
	КомандаCommit = ПутьКGit + " commit -F " + """" + ИмяФайла + """";
	РезультатCommit = ВыполнитьКомандуWindowsНаСервере(КомандаCommit, Настройка.ПутьЛокальногоХранения);
	Успешно = РезультатCommit.Код = 0;
	УдалитьФайлы(ИмяФайла);
	
	Если Успешно Тогда
		СтруктураОтвета = ОтправитьВУдаленныйРепозиторий(Настройка);
		Успешно = СтруктураОтвета.Результат = 0;		
	КонецЕсли;
	
	Возврат Успешно;
КонецФункции 

// Перебазирует ветку на указанный базовый коммит или ветку
//Параметры:
// Настройка - СправочникСсылка.Git_НастройкиРепозиториев 
// ИмяВетки - Строка  
// НоваяБаза - Строка - Идентификатор нового базового коммита или имя ветки
// Возвращаемое значение:
//  Структура, содержащая значения с ключами:
//		Результат - Число - 0, если выполнение команды завершилось успешно
//							1, если возник конфликт перебазирования, запрос rebase в этом случае автоматически отменяется 
//							2, если команда вернула ошибку выполнения
//		Сообщение - Строка - текст ответа или ошибки команды
Функция Перебазировать(Настройка, ИмяВетки, НоваяБаза) Экспорт
	СтруктураОтвета = Новый Структура();
	ПутьКGit = Константы.Git_ПутьКИсполняемомуФайлу.Получить();	
	
	Успешно = ПереключитьсяНаВеткуКоммит(Настройка, ИмяВетки);
	
	Если Успешно Тогда
		СтруктураОтвета = ПолучитьИзУдаленногоРепозитория(Настройка);
		Успешно = СтруктураОтвета.Результат = 0;
	КонецЕсли;
	
	Если Успешно Тогда		
		КомандаRebase = ПутьКGit + " rebase " + НоваяБаза;
		РезультатRebase = ВыполнитьКомандуWindowsНаСервере(КомандаRebase, Настройка.ПутьЛокальногоХранения); 
		Если РезультатRebase.Код = 0 Тогда
			СтруктураОтвета.Вставить("Результат", 0);
			СтруктураОтвета.Вставить("Сообщение", ""); 
		ИначеЕсли РезультатRebase.Код = 1 Тогда
			СтруктураОтвета.Вставить("Результат", 1);
			СтруктураОтвета.Вставить("Сообщение", РезультатRebase.Ответ);
			КомандаОтмены = ПутьКGit + " rebase --abort";
			ВыполнитьКомандуWindowsНаСервере(КомандаОтмены, Настройка.ПутьЛокальногоХранения);
		Иначе
			СтруктураОтвета.Вставить("Результат", 2);
			СтруктураОтвета.Вставить("Сообщение", РезультатRebase.Ответ + РезультатRebase.Ошибка);			
		КонецЕсли;
		
		Если СтруктураОтвета.Результат = 0 Тогда
			СтруктураОтвета = ОтправитьВУдаленныйРепозиторий(Настройка, "--force-with-lease");
		КонецЕсли;
	Иначе
		СтруктураОтвета.Вставить("Результат", 2);
		СтруктураОтвета.Вставить("Сообщение", "Ошибка переключения на ветку");			
	КонецЕсли;
	
	Возврат СтруктураОтвета;
КонецФункции  

// Вливает ветку в целевую (Merge)
//Параметры:
// Настройка - СправочникСсылка.Git_НастройкиРепозиториев 
// ИмяЦелевойВетки - Строка  
// ИмяВливаемойВетки - Строка
// Возвращаемое значение:
//  Структура, содержащая значения с ключами:
//		Результат - Число - 0, если выполнение команды завершилось успешно
//							1, если возник конфликт слияния, запрос merge в этом случае автоматически отменяется
//							2, если команда вернула ошибку выполнения
//		Сообщение - Строка - текст ответа или ошибки команды
Функция СлитьВетки(Настройка, ИмяЦелевойВетки, ИмяВливаемойВетки) Экспорт
	СтруктураОтвета = Новый Структура();
	ПутьКGit = Константы.Git_ПутьКИсполняемомуФайлу.Получить();	
	
	Успешно = ПереключитьсяНаВеткуКоммит(Настройка, ИмяЦелевойВетки);

	Если Успешно Тогда
		СтруктураОтвета = ПолучитьИзУдаленногоРепозитория(Настройка);
		Успешно = СтруктураОтвета.Результат = 0;
	КонецЕсли;
	
	Если Успешно Тогда
		КомандаMerge = ПутьКGit + " merge " + ИмяВливаемойВетки;	
		РезультатMerge = ВыполнитьКомандуWindowsНаСервере(КомандаMerge, Настройка.ПутьЛокальногоХранения); 
		Если РезультатMerge.Код = 0 Тогда
			СтруктураОтвета.Вставить("Результат", 0);
			СтруктураОтвета.Вставить("Сообщение", ""); 
		ИначеЕсли РезультатMerge.Код = 1 Тогда
			СтруктураОтвета.Вставить("Результат", 1);
			СтруктураОтвета.Вставить("Сообщение", РезультатMerge.Ответ);
			КомандаОтмены = ПутьКGit + " merge --abort";
			ВыполнитьКомандуWindowsНаСервере(КомандаОтмены, Настройка.ПутьЛокальногоХранения);
		Иначе
			СтруктураОтвета.Вставить("Результат", 2);
			СтруктураОтвета.Вставить("Сообщение", РезультатMerge.Ответ + РезультатMerge.Ошибка);			
		КонецЕсли;
	Иначе
		СтруктураОтвета.Вставить("Результат", 2);
		СтруктураОтвета.Вставить("Сообщение", "Ошибка переключения на целевую ветку");		
	КонецЕсли;
	
	Если СтруктураОтвета.Результат = 0 Тогда
		СтруктураОтвета = ОтправитьВУдаленныйРепозиторий(Настройка);
	КонецЕсли;
		
	Возврат СтруктураОтвета;
КонецФункции 

Функция ВыполнитьКомандуWindowsНаСервере(СтрокаКоманды, Каталог = Неопределено) Экспорт
	СтруктураВозврата = ПолучитьСтруктуруРезультатаКомандыWindows();
	
	ОбъектShell = Новый COMОбъект("WScript.Shell") ; 
	Если ЗначениеЗаполнено(Каталог) Тогда
		ОбъектShell.CurrentDirectory = Каталог; 
	КонецЕсли;
	Попытка
		Результат = ОбъектShell.Exec(СтрокаКоманды);
		КонтрольОжидания = 0;
		Пока Результат.Status <> 1 Цикл
			Если КонтрольОжидания > 20 Тогда
				Прервать;
			КонецЕсли;
			Пауза(1);
			КонтрольОжидания = КонтрольОжидания + 1;
		КонецЦикла;
		СтруктураВозврата.Вставить("Код", Результат.ExitCode);
		СтруктураВозврата.Вставить("Ответ", НРег(Результат.StdOut.ReadAll()));
		СтруктураВозврата.Вставить("Ошибка", Результат.StdErr.ReadAll());
        
		ТекстЗаписи = "Команда """ + СтрокаКоманды + """: " + СтруктураВозврата.Ответ + Символы.ПС + СтруктураВозврата.Ошибка;
		ЗаписьЖурналаРегистрации("Git.КомандаWindows", УровеньЖурналаРегистрации.Информация,,, ТекстЗаписи);
	Исключение
		ТекстЗаписи = "Команда """ + СтрокаКоманды + """ не выполнена: " + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Git.ОшибкаКомандыWindows", УровеньЖурналаРегистрации.Ошибка,,, ТекстЗаписи);
		СтруктураВозврата.Вставить("Ошибка", ТекстЗаписи);
	КонецПопытки;
	
	Возврат СтруктураВозврата;
КонецФункции
#КонецОбласти  

#Область Служебные
Процедура Пауза(Секунд) Экспорт
    
    ТекущийСеансИнформационнойБазы = ПолучитьТекущийСеансИнформационнойБазы();
    ФоновоеЗадание = ТекущийСеансИнформационнойБазы.ПолучитьФоновоеЗадание();
    
    Если ФоновоеЗадание = Неопределено Тогда
        Параметры = Новый Массив;
        Параметры.Добавить(Секунд);
        ФоновоеЗадание = ФоновыеЗадания.Выполнить("Git_ОбщегоНазначения.Пауза", Параметры);
    КонецЕсли;
        
    Попытка
        ФоновоеЗадание.ОжидатьЗавершения(Секунд);
    Исключение
        Возврат;
    КонецПопытки;
    
КонецПроцедуры 

Функция ЗаписатьСообщениеВФайл(СообщениеКоммита, ПутьЛокальногоХранения)
	ИмяФайла = ПутьЛокальногоХранения + "\.git\COMMITMESSAGE";
	
	Запись = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF8, Символы.ПС, Ложь);    
    Запись.ЗаписатьСтроку(СообщениеКоммита);
    Запись.Закрыть(); 
	Возврат ИмяФайла; 
КонецФункции

Функция ПолучитьСтруктуруРезультатаКомандыWindows()
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("Код", Неопределено);
	СтруктураВозврата.Вставить("Ответ", Неопределено);
	СтруктураВозврата.Вставить("Ошибка", Неопределено);	
	Возврат СтруктураВозврата;
КонецФункции

#КонецОбласти

#КонецОбласти
